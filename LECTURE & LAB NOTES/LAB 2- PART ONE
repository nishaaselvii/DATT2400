//1:29:30 - lab notes begin - lab notes until 1:45:54
//**IMPORTANT** lecture restarts at 1:48:29 - he pastes the same code with a little alterations and adds new values and lines but does explain everything so I'm going to put that into a new thing hence part one
//print(); value lets you see what the outputs are

//**ACTUAL CODE BEGINGS HERE**
//RANDOM WALKER
// gloabl variables
int x = 250;
int y = 250;
//initially variables
int speed = 4; // larger speed value creates a more scattered drawing
void setup() {
  size(500, 500);
  background(255);


  //x = width/2; - no longer needed because of gloabl variables - ^^ int x= 250; <- 
 // y = height/2; - ^
 
  //global variables cannot be defined outside of a set up loop
  //at this point, gloabal space is instanced before setup, hasn't gotten feedback of what the canvas size is suppose to be


  //myfunction(20,50); - gives values to the (a*b) in the myfunction loop
  //myfunction(7,51); ""
}

void draw() {
  //x = x+random(-speed,speed); <- prof initally put this
  //values in the brackets would be considered integers - which is why its coming up as an error - even though its being written as an integer, its technically defined as a floating point
  // integer = 1 2 3 4, floating point = 1.12 2.33

  //x = x+int(random(-speed, speed)); //bracket contains minimun and maximun values - turned into an integer by add int()
  //y = y+int(random(-speed, speed)); - no longer need after randomwalk function has been created

  //ellipse(x, y, 10, 10); // (xvalue= x, yvaule = x, scale of 10 pixels x 10 pixels) // - bc of randomwalk function - bascially showing how to simplify the function
  
  randomwalk(x, y, speed);
}
//FUNCTIONS : - making our own functions - make sure its out of setup and draw loops

// EXAMPLE FUNCTION: void myfunction(int a, int b) { //can virtually be named anything and is a space where anything can happen!. the int variables added into the bracket of the function are variables that are fed directly into the function

//print(a*b);
void randomwalk(int xpos, int ypos, int myspeed) {
  //experiment - adding: background(255); makes the background regenerate and you cannot see the previous lines of the circles so it just looks like a shaking ellipse.
  xpos = xpos+int(random(-myspeed, myspeed));
  ypos = ypos+int(random(-myspeed, myspeed));
  //intitally is was xpos = int(random(-myspeed, myspeed)); - and when it was like this, the circle was in the corner of the canvas. He didn't explain what the xpos+ does but it seems to center the circle.
  ellipse(xpos, ypos, 10, 10); //xpos = x-position, ypos = y-position
  
 
}
 
